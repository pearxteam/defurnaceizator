package ru.pearx.defurnaceizator

import net.minecraft.item.ItemStack
import net.minecraft.item.crafting.FurnaceRecipes
import net.minecraftforge.fml.common.Mod
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent
import net.minecraftforge.oredict.OreDictionary
import org.apache.logging.log4j.Logger

@Mod(modLanguageAdapter = "net.shadowfacts.forgelin.KotlinAdapter", name = NAME, modid = ID, version = VERSION, acceptedMinecraftVersions = ACCEPTED_MINECRAFT_VERSIONS, acceptableRemoteVersions = "*", dependencies = DEPENDENCIES)
object PMDumper {
    lateinit var log: Logger private set

    @Mod.EventHandler
    fun preInit(event: FMLPreInitializationEvent) {
        log = event.modLog
        with(event.modMetadata) {
            autogenerated = false
            modId = ID
            name = NAME
            description = DESCRIPTION
            version = VERSION
            authorList = AUTHORS
        }
    }

    @Mod.EventHandler
    fun postInit(event: FMLPostInitializationEvent) {
        val toAdd = mutableMapOf<ItemStack, Pair<ItemStack, Float>>()
        val iter = FurnaceRecipes.instance().smeltingList.iterator()
        for((input, output) in iter) { // for each recipe
            val inputOres = input.getOreNames()
            val outputOres = output.getOreNames()
            for(inputOre in inputOres) { // for each ore name of input stack
                if(inputOre.startsWith("ore")) {
                    val oreName = inputOre.substring(3)
                    if("ingot$oreName" in outputOres) {
                        val nuggets = OreDictionary.getOres("nugget$oreName")
                        if(!nuggets.isEmpty()) {
                            val xp = FurnaceRecipes.instance().getSmeltingExperience(output)
                            iter.remove()
                            log.info("Removed the ${input.toString(true)} > ${output.toString(true)} (XP: $xp) furnace recipe")
                            toAdd[input] = nuggets.first() to xp
                            continue
                        }
                    }
                }
            }
        }
        for((input, outputPair) in toAdd) {
            val (output, xp) = outputPair
            log.info("Added the ${input.toString(true)} > ${output.toString(true)} (XP: $xp) furnace recipe")
            FurnaceRecipes.instance().addSmeltingRecipe(input, output, xp)
        }
    }
}